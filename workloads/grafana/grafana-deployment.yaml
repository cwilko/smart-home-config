apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - image: cwilko/grafana-arm-url:latest
          env:
          - name: GF_INSTALL_PLUGINS
            value: "flant-statusmap-panel"
          envFrom:
          - secretRef:
              name: grafana-secrets
          name: grafana
          volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources/influxdb-datasource.yaml
            name: influxdb-ds-secret
            readOnly: true
            subPath: influxdb-datasource.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
            name: grafana-config
            readOnly: true
            subPath: dashboards.yaml
          - mountPath: /etc/grafana/provisioning/playlists/system_playlist.json
            name: grafana-config
            readOnly: true
            subPath: system_playlist.json
          - mountPath: /etc/grafana/provisioning/playlists/home_playlist.json
            name: grafana-config
            readOnly: true
            subPath: home_playlist.json
          - mountPath: /etc/grafana/grafana.ini
            name: grafana-config
            readOnly: true
            subPath: grafana.ini
          - mountPath: /var/lib/grafana/dashboards
            name: grafana-data
          lifecycle:
            postStart:
              exec:
                command: 
                  - "sh"
                  - "-c"
                  - >
                    #!/bin/bash
                    # Create playlist using the Grafana API

                    url=localhost:3000
                    playlist_sys=/etc/grafana/provisioning/playlists/system_playlist.json
                    playlist_home=/etc/grafana/provisioning/playlists/home_playlist.json
                    user=$GF_SECURITY_ADMIN_USER
                    password=$GF_SECURITY_ADMIN_PASSWORD

                    initialised=false;

                    while [[ $initialised == false ]];
                    do
                    echo "Initiallising...";
                    var=$(curl --write-out %{http_code} --silent --output /dev/null http://${url}/api/playlists);

                    if [[ "$var" == "200" ]]; then
                        if [[ $(curl --write-out %{http_code} --silent --output /dev/null http://${url}/api/playlists/1) == "200" ]]; then
                            echo "Playlist created."
                        else
                            echo "Creating playlists..."
                            curl -s -X POST -H "content-type: application/json" -u ${user}:${password} -d @${playlist_sys} http://${url}/api/playlists
                            curl -s -X POST -H "content-type: application/json" -u ${user}:${password} -d @${playlist_home} http://${url}/api/playlists
                        fi
                        initialised=true
                    else
                        echo $var
                        sleep 5
                    fi
                    done
      restartPolicy: Always
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config 
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data           
      - name: influxdb-ds-secret
        secret:
          secretName: influxdb-ds-secret